 Json : JavaScript Object Notation라는 의미의 축약어로
 데이터를 저장하거나 전송할 때 많이 사용되는 경량의 DATA 교환 형식
사람이 읽기도 편하고 컴퓨터가 읽기도 편한 데이터 형식(언어가 달라도 OK)

사용 -> PlayerPrefs.SetString("myName", myname);
“myname” : 파일이름 myname : 파일에 내용 저장

Json의 형태
{
      Key (string) : Value ( int, float, bool, string, List, [ ], object = 또다른Json )
} 

저장은 Set자료형, 불러오기는Get자료형

제이슨에 여러 정보를 저장 할 떄 (다중 유저의 정보)
[(배열)
	제이슨,
	제이슨,
	제이슨,
]

son 규칙 
배열 : value값, key가 없으므로 그대로 json으로 넣으면 못받는다
        Key > Box , Value > 사과 / Json이라는 창고에 넣으려면 Box에 넣어서 보관해야함

** 제이슨 만들기 순서
1. 구조체 또는 Class 만들기 
: json이 문자열 형태로 통째로 담기때문에 구조체 또는 Class가 필요하다

2. 원래 클래스에 구조체 선언 
	→  public UserInfo userInfo = new UserInfo(); : 
클래스는 변수로 선언시 new가 꼭 필요하다 → 새로운 객체로 생성하기 위함

3. 변수 클래스에 정보를 저장한다
→ userInfo.myName = “김현진”;

4. 정보를 저장할 Save 함수를 만든다
    1. 정보를 Json형식으로 바꾼다 (Json은 문자열 형태로 나오므로 string으로 받음)
  		  → string jsonData = JsonUtility.ToJson(userInfo, true);
    2. 저장
      ① 단일저장(PlayerPrefs, 파일) 
        PlayerPrefs :  PlayerPrefs.SetString("myInfo", jsonData);
			② 여러개 저장(List 선언)
        여러 정보를 담을 List를 만든다(이때의 List는 Value)
        → public List<UserInfo> friendList = new List<UserInfo>();
        List 는 Json에 해당하는 value값으로 Key값이 있어야만 Json이 string으로 바꿔줄 수 있음
        Key값을 받을 Class를 선언한다 : 이때 제네릭을 사용해야 함

5. 정보를 불러올 Load 함수를 만든다
    단일 불러오기 : PlayerPrefs → string jsonData = PlayerPrefs.GetString("myInfo");

6. 불러온 정보를 선언한 클래스형으로 다시세팅한다

