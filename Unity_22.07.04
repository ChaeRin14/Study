- 배열
: 크기가 정해짐. => 데이터를 추가, 삭제 어려움
: 고정되어 변하지 않음 
: 메모리에 순서대로 잡힘 
: 새로운 메모리를 넣기-> 메모리의 중간을 자르고 그 사이에 넣기
: 검색 매우 빠름

- List 
: data 안에 다음 data의 주소가 들어있음
: 메모리가 연속적이지 않음 => 다음에 필요한 data의 주소가 들어감
: 데이터를 추가, 삭제가 쉬움

- List 자료구조() 
자료의 추가, 삭제 용이, 배열과 달리 크기 정해주지 않아도 된다
구조 : List <자료형> 변수
<> 사용
자료형에 저장하려는 데이터 넣어주기
같은 자료형을 목록으로 가지고 있다.
Heap으로 올라감, 따라서 New 사용
list.Add(추가),  list.RemoveAt(삭제), list.Insert(삽입)
생성자 함수
GameObject obj = new GameObject();

- instance
: 스크립트(설계도)의 실체(건물)
: 스크립트가 없으면 만들어지지 못함

- new 
: heap에 메모리가 잡힘
: 배열, 벡터 등과 같은 것들에 값을 넣어줄 때 사용
: ex. new GameObject[숫자];

- stack, heap
stack : 변수들이 올라옴 => 함수가 끝나면 스스로 지워짐
heap : 객체들이 올라옴 => 사용자가 지워야함

- Instantiate 
: Factory pattern의 종류, Factory 메서드(Unity 제공)

- 점프문
① break : 중간에 반복문 종료
② return : 함수 종료
③ continue : 특정 부분만 뛰어넘기


- 객체지향 : 상속관계 ,캡슐화, 다형성
	→ 디자인패턴으로 확장
	→ 인터페이스(=설계도) : 미래에서 쓰기 위해 설계단계를 미리 잡아놓는 것
    (이러한 양식으로 정보를 보내달라)

