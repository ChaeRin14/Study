- Utility Function : GetAxis, GetButton…
동일 기능 반복 되는 부분을 static에 함수로 넣는다
public static void CollisionEnemy(매개변수)

- Value와 Reference
  Value : 복제, Call By Value, int, float, char, Vector(구조체)
  Reference : 원본, Call by Reference, class, 객체, GameObject , String,배열

Value를 Reference로 : ref, out
- ref : 참조형으로 넘긴다(원본 데이터를 넘길거야)
- out : ref와 같음 but 값을 할당 받을 수만 있음(only Set)
- StringBuilder : 리스트처럼 문자를 추가해줄 수 있음
		: 문자열 사용보다는 이것 사용을 권장


** 중요 자주 쓰임
- eulerAngles vs Quaternion
  eulerAngles : x,y,z 어느 축으로 회전하느냐에 따라 회전 달라짐
  Quaternion : x,y,z 축을 잊고 특별한 축을 딱 찍어서 그 축을 기준으로 회전(사원수) 회전의 모호성 해결
              1. 거의 모든걸 *로 해결 : 벡터의 합
              2. Inverse : 벡터의 빼기(FromToRotation)
              3. 회전을 계산하기 위함  
              4. Quaternion.Euler(x, y, z) => Euler 값을 Quaternion으로 바꿔줌


** 중요 자주 쓰임
- 백터의 외적
Vector3.Cross(a,b)
Mathf.Lerp(시작값,끝값,보간값) : 결국 끝값까지 도달하지 않으므로 잘못쓰면 무한루프 할 수 있음


- Time.deltaTime
: 1 프레임 업데이트 될 때마다 걸리는 시간 (업데이트 하려는 정보가 많으면 시간이 더 소요됨) 
=> 즉 deltaTime 은 일정한 시간이 아니다.

- Update() vs FixedUpdate() vs LateUpdate()
  Update() : 그리는데 사용, 화면 갱신 위함
  FixedUpdate() : 물리엔진에서 사용, 한번 도는데 30초 걸렸어도, fixedDeltaTime으로 계산한다, 독립적, deltaTime 사용 X 
  LateUpdate() : 1프레임이 끝나는 시점의 마지막 결과물(카메라가 주인공의 프레임당 마지막 움직임을 찍고싶다)
* 초당 프레임을 확인했을 때 Update는 프레임이 많고 변동이 있으며 Fixed는 변동이 없음
